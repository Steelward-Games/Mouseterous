{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,uBAAe,EAAE;AACb,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,MAAM;SAClB;AACD,uBAAe,EAAE;AACb,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,MAAM;SAClB;AACD,wBAAgB,EAAE;AACd,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,MAAM;SAClB;AACD,wBAAgB,EAAE;AACd,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,MAAM;SAClB;AACD,eAAO,EAAG,EAAE;AACZ,UAAE,EAAG,CAAC,GAAG;AACT,UAAE,EAAG,CAAC,GAAG;KACZ;;AAED,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,gBAAgB,EAAC,IAAI,CAAC,gBAAgB,EAAC,IAAI,CAAC,eAAe,EAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AACvG,YAAI,CAAC,SAAS,EAAE,CAAC;KACpB;;AAED,aAAS,EAAE,qBAAU;AACjB,YAAI,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAE,yBAAyB,CAAE,CAAC;AAClD,YAAI,IAAI,GAAG,IAAI,CAAC;AAChB,UAAE,CAAC,MAAM,CAAC,IAAI,CAAE,GAAG,EAAE,UAAS,GAAG,EAAC,GAAG,EAAC;AAClC,cAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAChB,cAAE,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAClB,gBAAI,OAAO,GAAG,CAAC,CAAC;AAChB,iBAAI,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,GAAE,CAAC,EAAE,CAAC,IAAK,CAAC,EAAE,CAAC,EAAE,EAAC;AACpC,qBAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,EAAC;AAC9B,sBAAE,CAAC,GAAG,EAAE,CAAA;AACR,wBAAI,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,wBAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC5B,wBAAI,CAAC,kBAAkB,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC;AACrC,2BAAO,EAAE,CAAA;iBACZ;aACJ;SACJ,CAAC,CAAC;KACN;;AAGD,sBAAkB,EAAE,4BAAS,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC3C,YAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,GAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KAClE;;CAMJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n    \r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        dirtTile1Prefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        dirtTile2Prefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        brickTile1Prefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        brickTile2Prefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        tileIDs : [],\r\n        x0 : -420,\r\n        y0 : -320,\r\n    },\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.tileIDs = [this.brickTile1Prefab,this.brickTile2Prefab,this.dirtTile1Prefab,this.dirtTile2Prefab];\r\n        this.createMap();\r\n    },\r\n    \r\n    createMap: function(){\r\n        var url = cc.url.raw( 'resources/map/Map1.json' );\r\n        var self = this;\r\n        cc.loader.load( url, function(err,res){\r\n            cc.log(self.x0);\r\n            cc.log(res.width);\r\n            var counter = 0;\r\n            for(var i = res.height -1; i  >= 0; i--){\r\n                for(var j = 0; j < res.width; j++){\r\n                    cc.log()\r\n                    var newTile = cc.instantiate(self.tileIDs[res.layers[0].data[counter]-1]);\r\n                    self.node.addChild(newTile);\r\n                    self.updateTilePosition(j,i,newTile);\r\n                    counter++\r\n                }\r\n            }\r\n        });\r\n    },\r\n    \r\n\r\n    updateTilePosition: function(xPos, yPos, tile) {\r\n        tile.setPosition(cc.p(xPos*100 + this.x0, yPos*100 + this.y0));\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    //update: function (dt) {\r\n    //    cc.log(cat)\r\n    //},\r\n});\r\n"
  ]
}