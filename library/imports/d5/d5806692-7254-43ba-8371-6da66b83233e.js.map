{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,kBAAU,EAAE;AACR,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,MAAM;SAClB;AACD,UAAE,EAAG,CAAC,GAAG;AACT,UAAE,EAAG,CAAC,GAAG;KACZ;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,YAAI,CAAC,SAAS,EAAE,CAAC;KACpB;AACD,YAAQ,EAAE,oBAAU;AACpB,YAAI,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAE,yBAAyB,CAAE,CAAC;AAClD,YAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjC,UAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;KAC9B;AACD,aAAS,EAAE,qBAAU;AACjB,YAAI,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAE,yBAAyB,CAAE,CAAC;AAClD,UAAE,CAAC,MAAM,CAAC,IAAI,CAAE,GAAG,EAAE,UAAU,GAAG,EAAE,GAAG,EACvC;AACI,cAAE,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC/B,cAAE,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAClB,gBAAI,OAAO,GAAG,EAAE,CAAC;AACjB,iBAAI,IAAI,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAC;AACnC,uBAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;aACpD;;AAED,iBAAI,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,GAAE,CAAC,EAAE,CAAC,IAAK,CAAC,EAAE,CAAC,EAAE,EAAC;AACpC,qBAAI,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,GAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAC;AAClC,wBAAI,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC;AAChE,sBAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACzC,sBAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC;iBAC1D;aACJ;SACJ,CAAC,CAAC;KAEN;AACD,sBAAkB,EAAE,4BAAS,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC3C,YAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,GAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KAClE;;CAMJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        tilePrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        x0 : -420,\r\n        y0 : -320,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.loadJson();\r\n        this.createMap();\r\n    },\r\n    loadJson: function(){\r\n    var url = cc.url.raw( 'resources/map/Map1.json' );  \r\n    var myJSON = cc.loader.load(url);\r\n    cc.log(JSON.stringify(myJSON));\r\n    },\r\n    createMap: function(){\r\n        var url = cc.url.raw( 'resources/map/Map1.json' );\r\n        cc.loader.load( url, function( err, res)\r\n        {\r\n            cc.log(cc.director.getScene());\r\n            cc.log(res.width);\r\n            var tileIDs = [];\r\n            for(var exKey in res.tilesets[0].tiles){\r\n                tileIDs.push(res.tilesets[0].tiles[exKey].image);\r\n            }\r\n            \r\n            for(var i = res.height -1; i  >= 0; i--){\r\n                for(var j = res.width -1; j >= 0; j--){\r\n                    var newTile = cc.instantiate(cc.director.getScene().tilePrefab);\r\n                    cc.director.getScene().addChild(newTile);\r\n                    cc.director.getScene().updateTilePosition(i,j,newTile);\r\n                }\r\n            }\r\n        });\r\n\r\n    },\r\n    updateTilePosition: function(xPos, yPos, tile) {\r\n        tile.setPosition(cc.p(xPos*100 + this.x0, yPos*100 + this.y0));\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}